"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk$"] = self["webpackChunk$"] || []).push([["src_index_ts"],{

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gql2deploy: () => (/* reexport safe */ _tutorial_gql2_run__WEBPACK_IMPORTED_MODULE_0__.gql2deploy),\n/* harmony export */   gql2update: () => (/* reexport safe */ _tutorial_gql2_run__WEBPACK_IMPORTED_MODULE_0__.gql2update),\n/* harmony export */   zkAppKeys: () => (/* reexport safe */ _tutorial_gql2_run__WEBPACK_IMPORTED_MODULE_0__.zkAppKeys)\n/* harmony export */ });\n/* harmony import */ var _tutorial_gql2_run__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tutorial-gql2/run */ \"./src/tutorial-gql2/run.ts\");\n// import { runTutorial2 } from './tutorial2/run';\n// import { runTutorialGql } from './tutorial-gql/run';\n// import { runTutorial3 } from './tutorial3/run';\n\n// document.getElementById('tutorial2').onclick = () => runTutorial2();\n// document.getElementById('tutorial3').onclick = () => runTutorial3();\n// document.getElementById('tutorialgql').onclick = () => runTutorialGql();\n// document.getElementById('gql2deploy').onclick = () => gql2deploy();\n// document.getElementById('gql2update').onclick = () => gql2update();\n\n\n\n//# sourceURL=webpack://$/./src/index.ts?");

/***/ }),

/***/ "./src/tutorial-gql2/run.ts":
/*!**********************************!*\
  !*** ./src/tutorial-gql2/run.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gql2deploy: () => (/* binding */ gql2deploy),\n/* harmony export */   gql2update: () => (/* binding */ gql2update),\n/* harmony export */   zkAppKeys: () => (/* binding */ zkAppKeys)\n/* harmony export */ });\n/* harmony import */ var o1js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! o1js */ \"./node_modules/o1js/dist/web/index.js\");\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nclass Add extends o1js__WEBPACK_IMPORTED_MODULE_0__.SmartContract {\n    constructor() {\n        super(...arguments);\n        this.num = (0,o1js__WEBPACK_IMPORTED_MODULE_0__.State)();\n    }\n    init() {\n        this.account.provedState.requireEquals(this.account.provedState.get());\n        this.account.provedState.get().assertFalse();\n        super.init();\n        this.num.set((0,o1js__WEBPACK_IMPORTED_MODULE_0__.Field)(1));\n    }\n    async update() {\n        const currentState = this.num.getAndRequireEquals();\n        const newState = currentState.add(5);\n        this.num.set(newState);\n    }\n    async deploy() {\n        super.deploy();\n        this.account.permissions.set({\n            ...o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.default(),\n            setVerificationKey: {\n                txnVersion: o1js__WEBPACK_IMPORTED_MODULE_0__.TransactionVersion.current(),\n                auth: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            },\n            setDelegate: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            setPermissions: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            setZkappUri: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            setTokenSymbol: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            incrementNonce: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            setVotingFor: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            setTiming: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            send: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            editState: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            receive: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            access: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n            editActionState: o1js__WEBPACK_IMPORTED_MODULE_0__.Permissions.proof(),\n        });\n    }\n}\n__decorate([\n    (0,o1js__WEBPACK_IMPORTED_MODULE_0__.state)(o1js__WEBPACK_IMPORTED_MODULE_0__.Field),\n    __metadata(\"design:type\", Object)\n], Add.prototype, \"num\", void 0);\n__decorate([\n    o1js__WEBPACK_IMPORTED_MODULE_0__.method,\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", Promise)\n], Add.prototype, \"update\", null);\nconst wallets = [\n    {\n        privateKey: 'EKEQGWy4TjbVeqKjbe7TW81DKQM34min5FNmXpKArHKLyGVd3KSP',\n        publicKey: 'B62qpD75xH5R19wxZG2uz8whNsHPTioVoYcPV3zfjjSbzTmaHQHKKEV',\n    },\n    {\n        privateKey: 'EKETKywEr7ktbzqj8D2aj4yYZVMyj33sHuWLQydbzt1M3sGnAbTh',\n        publicKey: 'B62qnLjgW4LAnrxkcdLc7Snb49qx6aP5qsmPsp6ueZN4XPMC621cqGc',\n    },\n];\nconst payerKeys = {\n    publicKey: o1js__WEBPACK_IMPORTED_MODULE_0__.PrivateKey.fromBase58(wallets[0].privateKey).toPublicKey(),\n    privateKey: o1js__WEBPACK_IMPORTED_MODULE_0__.PrivateKey.fromBase58(wallets[0].privateKey),\n};\nconst randPrivateKey = o1js__WEBPACK_IMPORTED_MODULE_0__.PrivateKey.random();\nconst zkAppKeys = {\n    publicKey: randPrivateKey.toPublicKey(),\n    privateKey: randPrivateKey,\n};\nconsole.log('zkAppKeys', {\n    publicKey: zkAppKeys.publicKey.toBase58(),\n    privateKey: zkAppKeys.privateKey.toBase58()\n});\nasync function gql2deploy() {\n    const network = o1js__WEBPACK_IMPORTED_MODULE_0__.Mina.Network('https://api.minascan.io/node/devnet/v1/graphql');\n    o1js__WEBPACK_IMPORTED_MODULE_0__.Mina.setActiveInstance(network);\n    // const zkAppPublicKey = PublicKey.fromBase58(wallets[1].publicKey);\n    // const zkAppPrivateKey = PrivateKey.fromBase58(wallets[1].privateKey);\n    const zkApp = new Add(zkAppKeys.publicKey);\n    log('fetching account...');\n    const { account } = await (0,o1js__WEBPACK_IMPORTED_MODULE_0__.fetchAccount)({ publicKey: payerKeys.publicKey });\n    log('Compiling...');\n    await Add.compile();\n    log('Updating...');\n    log('ZkAPP pub_key:', zkAppKeys.publicKey.toBase58(), zkAppKeys.privateKey.toBase58());\n    const payerAccount = { sender: payerKeys.publicKey, fee: Number('0.112') * 1e9, nonce: o1js__WEBPACK_IMPORTED_MODULE_0__.Types.Account.toJSON(account).nonce };\n    log('payerAccount', { sender: payerKeys.publicKey.toBase58(), fee: Number('0.112') * 1e9, nonce: o1js__WEBPACK_IMPORTED_MODULE_0__.Types.Account.toJSON(account).nonce });\n    let tx = await o1js__WEBPACK_IMPORTED_MODULE_0__.Mina.transaction(payerAccount, async () => {\n        o1js__WEBPACK_IMPORTED_MODULE_0__.AccountUpdate.fundNewAccount(payerKeys.publicKey);\n        log('zkApp deploying...');\n        await zkApp.deploy();\n    });\n    log('Proving...');\n    await tx.prove();\n    log('Submitting...');\n    await tx.sign([payerKeys.privateKey, zkAppKeys.privateKey]);\n    await tx.safeSend().then((sentTx) => {\n        log(sentTx);\n        if (sentTx.data) {\n            log('Sent transaction: ', sentTx);\n        }\n        else if (tx?.errors?.length) {\n            log('Transaction errors: ', tx?.errors[0]);\n            log(tx?.errors[0].statusText);\n        }\n    });\n}\nasync function gql2update() {\n    const network = o1js__WEBPACK_IMPORTED_MODULE_0__.Mina.Network('https://api.minascan.io/node/devnet/v1/graphql');\n    o1js__WEBPACK_IMPORTED_MODULE_0__.Mina.setActiveInstance(network);\n    // const zkAppPublicKey = PublicKey.fromBase58(wallets[1].publicKey);\n    // const zkAppPrivateKey = PrivateKey.fromBase58(wallets[1].privateKey);\n    const zkApp = new Add(zkAppKeys.publicKey);\n    log('fetching account...');\n    const { account } = await (0,o1js__WEBPACK_IMPORTED_MODULE_0__.fetchAccount)({ publicKey: payerKeys.publicKey });\n    log('Compiling...');\n    await Add.compile();\n    log('Updating...');\n    log('ZkAPP pub_key:', zkAppKeys.publicKey.toBase58(), zkAppKeys.privateKey.toBase58());\n    const payerAccount = { sender: payerKeys.publicKey, fee: Number('0.112') * 1e9, nonce: o1js__WEBPACK_IMPORTED_MODULE_0__.Types.Account.toJSON(account).nonce };\n    log('payerAccount', { sender: payerKeys.publicKey.toBase58(), fee: Number('0.112') * 1e9, nonce: o1js__WEBPACK_IMPORTED_MODULE_0__.Types.Account.toJSON(account).nonce });\n    log('Fetch zk app account');\n    const { account: zkAccount } = await (0,o1js__WEBPACK_IMPORTED_MODULE_0__.fetchAccount)({ publicKey: zkAppKeys.publicKey });\n    log('zk Account:', zkAccount);\n    log('zkApp deployed');\n    const tx = await o1js__WEBPACK_IMPORTED_MODULE_0__.Mina.transaction(payerAccount, async () => {\n        log('zkApp updating...');\n        await zkApp.update();\n        log('zkApp updated');\n    });\n    log('Proving...');\n    await tx.prove();\n    log('Submitting...');\n    await tx.sign([payerKeys.privateKey, zkAppKeys.privateKey]).safeSend().then((sentTx) => {\n        log(sentTx);\n        if (sentTx) {\n            log('Sent transaction: ', sentTx);\n        }\n        else if (tx?.errors?.length) {\n            log('Transaction errors: ', tx?.errors[0]);\n            log(tx?.errors[0].statusText);\n        }\n    });\n}\n// async function createAndDeployZkapp() {\n// \tconst network = Mina.Network('https://api.minascan.io/node/devnet/v1/graphql');\n// \tMina.setActiveInstance(network);\n// \t// const zkAppPublicKey = PublicKey.fromBase58(wallets[1].publicKey);\n// \t// const zkAppPrivateKey = PrivateKey.fromBase58(wallets[1].privateKey);\n// \tconst zkApp = new Add(deployedZkApp.publicKey);\n// \tlog('fetching account...');\n// \tconst { account } = await fetchAccount({ publicKey: payerKeys.publicKey });\n//\n// \t// const accountPrivateKey: PrivateKey = PrivateKey.fromBase58(wallets[0].privateKey);\n// \t// const accountPublicKey: PublicKey = accountPrivateKey.toPublicKey();\n//\n// \tlog('Compiling...');\n// \tawait Add.compile();\n// \tlog('Updating...');\n// \tlog('ZkAPP pub_key:', zkAppKeys.publicKey.toBase58(), zkAppKeys.privateKey.toBase58());\n//\n// \tconst payerAccount: any = { sender: payerKeys.publicKey, fee: Number('0.112') * 1e9, nonce: Types.Account.toJSON(account).nonce };\n// \tlog('payerAccount', { sender: payerKeys.publicKey.toBase58(), fee: Number('0.112') * 1e9, nonce: Types.Account.toJSON(account).nonce });\n// \t// let tx = await Mina.transaction(payerAccount, async () => {\n// \t// \tAccountUpdate.fundNewAccount(payerKeys.publicKey);\n// \t// \tlog('zkApp updating...');\n// \t// \tawait zkApp.deploy();\n// \t// });\n// \t//\n// \t// log('Proving...');\n// \t// await tx.prove();\n// \t//\n// \t// log('Submitting...');\n// \t// await tx.sign([payerKeys.privateKey, PrivateKey.fromBase58(deployedZkApp.privateKey)]);\n// \t//\n// \t// await tx.safeSend().then((sentTx) => {\n// \t// \tlog(sentTx);\n// \t// \tif (sentTx.data) {\n// \t// \t\tlog('Sent transaction: ', sentTx);\n// \t// \t} else if ((tx as any)?.errors?.length) {\n// \t// \t\tlog('Transaction errors: ', (tx as any)?.errors[0]);\n// \t// \t\tlog((tx as any)?.errors[0].statusText);\n// \t// \t}\n// \t// });\n// \tlog('Fetch zk app account');\n// \tconst { account: zkAccount } = await fetchAccount({ publicKey: deployedZkApp.publicKey });\n// \tlog('zk Account:', zkAccount);\n// \tlog('zkApp deployed');\n// \tconst tx = await Mina.transaction(payerAccount, async () => {\n// \t\tlog('zkApp updating...');\n// \t\tawait zkApp.update();\n// \t\tlog('zkApp updated');\n// \t});\n//\n// \tlog('Proving...');\n// \tawait tx.prove();\n//\n// \tlog('Submitting...');\n// \tawait tx.sign([payerKeys.privateKey, deployedZkApp.privateKey]).safeSend().then((sentTx: any) => {\n// \t\tlog(sentTx);\n// \t\tif (sentTx) {\n// \t\t\tlog('Sent transaction: ', sentTx);\n// \t\t} else if ((tx as any)?.errors?.length) {\n// \t\t\tlog('Transaction errors: ', (tx as any)?.errors[0]);\n// \t\t\tlog((tx as any)?.errors[0].statusText);\n// \t\t}\n// \t});\n// }\nfunction log(...msg) {\n    console.log(msg);\n}\n\n\n//# sourceURL=webpack://$/./src/tutorial-gql2/run.ts?");

/***/ })

}]);